pipeline {
    options {
      timeout(time: 10, unit: 'MINUTES')
      disableConcurrentBuilds()
    }
    agent {
        docker {
            image 'elirenato2000/jenkins_node'
            args """
                -u root:root
                -v /var/run/docker.sock:/var/run/docker.sock
                -e APP_VERSION=1.0.${BUILD_NUMBER}
            """
        }
    }
    stages {
        stage('Install') {
            steps {
                sh 'npm install'
                sh 'npm install -g @angular/cli'
            }
        }
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        stage('Build') {
            steps {
                sh 'ng build --configuration production'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -f src/main/docker/Dockerfile.server -t angular-keycloak .'
                sh 'docker image tag angular-keycloak ${DOCKER_REGISTRY_HOST}/com.mycompany/angular-keycloak:${APP_VERSION}'
                sh 'docker login ${DOCKER_REGISTRY_HOST} -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD}'
                sh 'docker push ${DOCKER_REGISTRY_HOST}/com.mycompany/angular-keycloak:${APP_VERSION}'
            }
        }
        stage('Deploy') {
            steps {
                sh "sed -i 's/DOCKER_REGISTRY_HOST/${DOCKER_REGISTRY_HOST}/g' src/main/kubernetes/kubernetes.yaml"
                sh 'sed -i "s/APP_VERSION/${APP_VERSION}/g" src/main/kubernetes/kubernetes.yaml'
                sshagent (credentials: ['kubernetes-server'])  {
                    sh 'scp -o StrictHostKeyChecking=no -r -v -P ${KUBERNETES_SERVER_PORT} src/main/kubernetes/kubernetes.yaml ${KUBERNETES_SERVER_USERNAME}@${KUBERNETES_SERVER_HOST}:/tmp/kubernetes-angular-keycloak.yml'
                    sh 'ssh -o StrictHostKeyChecking=no -p ${KUBERNETES_SERVER_PORT} ${KUBERNETES_SERVER_USERNAME}@${KUBERNETES_SERVER_HOST} \"microk8s kubectl apply -f /tmp/kubernetes-angular-keycloak.yml\"'
                }
            }
        }
    }
}
